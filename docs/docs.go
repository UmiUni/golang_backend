// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag at
// 2018-07-08 01:23:37.328958243 -0700 PDT m=+0.035225994

package docs

import (
	"github.com/swaggo/swag"
)

var doc = `{
    "swagger": "2.0",
    "info": {
        "description": "This is a sample server Petstore server.",
        "title": "Swagger Example API",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0"
    },
    "host": "178.128.0.108:3001",
    "basePath": "/",
    "paths": {
        "/applicant_signup": {
            "post": {
                "description": "ApplicantSignup",
                "consumes": [
                    "application/json"
                ],
                "summary": "ApplicantSignup",
                "parameters": [
                    {
                        "description": "Body JSON",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/model.ApplicantSignupEmailStruct"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success: verification email sent",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/model.ApplicantSignupSuccessStruct"
                        }
                    },
                    "400": {
                        "description": "email already registered",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/model.ApplicantSignupAPIError1"
                        }
                    }
                }
            }
        },
        "/referrer_signup": {
            "post": {
                "description": "ReferrerSignup",
                "consumes": [
                    "application/json"
                ],
                "summary": "ReferrerSignup",
                "parameters": [
                    {
                        "description": "Body JSON",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/model.ReferrerSignupEmailStruct"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success: verification email sent",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/model.ReferrerSignupSuccessStruct"
                        }
                    },
                    "400": {
                        "description": "email already registered",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/model.ReferrerSignupAPIError1"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "model.ApplicantSignupAPIError0": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "email cannot be empty"
                }
            }
        },
        "model.ApplicantSignupAPIError1": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "email already registered"
                }
            }
        },
        "model.ApplicantSignupEmailStruct": {
            "type": "object",
            "properties": {
                "Email": {
                    "type": "string",
                    "example": "superchaoran@gmail.com"
                }
            }
        },
        "model.ApplicantSignupSuccessStruct": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "verification email sent"
                }
            }
        },
        "model.ReferrerSignupAPIError0": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "email cannot be empty"
                }
            }
        },
        "model.ReferrerSignupAPIError1": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "email already registered"
                }
            }
        },
        "model.ReferrerSignupEmailStruct": {
            "type": "object",
            "properties": {
                "Email": {
                    "type": "string",
                    "example": "superchaoran@gmail.com"
                }
            }
        },
        "model.ReferrerSignupSuccessStruct": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "verification email sent"
                }
            }
        }
    }
}`

type s struct{}

func (s *s) ReadDoc() string {
	return doc
}
func init() {
	swag.Register(swag.Name, &s{})
}
