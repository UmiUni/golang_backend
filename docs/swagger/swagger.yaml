basePath: /
definitions:
  model.ActivateAndSignupRequest:
    properties:
      Email:
        example: wang374@uiuc.edu
        type: string
      Password:
        example: wang374password
        type: string
      Token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1MzEzNTIyMDAsImlzcyI6ImpvZ2NoYXQuY29tIiwic3ViIjoid2FuZzM3NEB1aXVjLmVkdSJ9.gC7dTl64XDe5BwlS8PuZxBxGes1ujcCWFbe23r0xOXM
        type: string
      Username:
        example: wang374
        type: string
    type: object
  model.ActivateAndSignupResponseAPIError0:
    properties:
      error:
        example: username already in use
        type: string
    type: object
  model.ActivateAndSignupResponseAPIError1:
    properties:
      error:
        example: invalid token
        type: string
    type: object
  model.ActivateAndSignupResponseAPIError2:
    properties:
      error:
        example: email already activated
        type: string
    type: object
  model.ActivateAndSignupResponseSuccess:
    properties:
      AuthToken:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1MzEzNTM1NjUsImlzcyI6ImpvZ2NoYXQuY29tIiwic3ViIjoid2FuZzM3NEB1aXVjLmVkdSJ9.XwmDhW1b99E9jwGatN_6y1tYpLGBcAqywS9fI23Oxxo
        type: string
      Email:
        example: wang374@uiuc.edu
        type: string
      UserId:
        example: ce57e12a-fe27-43a2-9a1f-0792b3d36f2e
        type: string
      Username:
        example: wang374
        type: string
    type: object
  model.AddCompanyRequest:
    properties:
      Domain:
        example: google.com
        type: string
      Name:
        example: Google
        type: string
    type: object
  model.AddCompanyResponseError0:
    properties:
      error:
        example: schemaless add company fail
        type: string
    type: object
  model.AddCompanyResponseSuccess:
    properties:
      message:
        example: status 200
        type: string
    type: object
  model.AddSchoolRequest:
    properties:
      Domain:
        example: illinois.edu
        type: string
      Name:
        example: University of Illinois at Urbana-Champaign
        type: string
    type: object
  model.AddSchoolResponseError0:
    properties:
      error:
        example: schemaless add school fail
        type: string
    type: object
  model.AddSchoolResponseSuccess:
    properties:
      message:
        example: status 200
        type: string
    type: object
  model.ApplicantSignupEmailRequest:
    properties:
      Email:
        example: wang374@uiuc.edu
        type: string
    type: object
  model.ApplicantSignupResponseAPIError0:
    properties:
      error:
        example: email cannot be empty
        type: string
    type: object
  model.ApplicantSignupResponseAPIError1:
    properties:
      error:
        example: email already registered
        type: string
    type: object
  model.ApplicantSignupResponseSuccess:
    properties:
      message:
        example: verification email sent
        type: string
    type: object
  model.PostPositionRequest:
    properties:
      Company:
        example: Uber
        type: string
      Description:
        example: Build a microservice platform for Uber. A position require microservice
          knowledge and past experience in Golang.
        type: string
      Position:
        example: Software Engineer
        type: string
      Username:
        example: chaoran@Uber.com
        type: string
    type: object
  model.PostPositionResponseAPIError0:
    properties:
      error:
        example: username does not exist
        type: string
    type: object
  model.PostPositionResponseAPIError1:
    properties:
      error:
        example: construct cell failure
        type: string
    type: object
  model.PostPositionResponseSuccess:
    properties:
      message:
        example: 'Success: status 200'
        type: string
    type: object
  model.ReferrerSignupEmailRequest:
    properties:
      Email:
        example: admin@jogchat.com
        type: string
    type: object
  model.ReferrerSignupResponseAPIError0:
    properties:
      error:
        example: email cannot be empty
        type: string
    type: object
  model.ReferrerSignupResponseAPIError1:
    properties:
      error:
        example: email already registered
        type: string
    type: object
  model.ReferrerSignupResponseSuccess:
    properties:
      message:
        example: verification email sent
        type: string
    type: object
  model.ResetPasswordFormRequest:
    properties:
      Email:
        example: wang374@uiuc.edu
        type: string
      Password:
        example: wang374newpassword
        type: string
      Token:
        type: string
    type: object
  model.ResetPasswordFormResponseAPIError0:
    properties:
      error:
        example: email not registered
        type: string
    type: object
  model.ResetPasswordFormResponseSuccess:
    properties:
      AuthToken:
        type: string
      Email:
        example: wang374@uiuc.edu
        type: string
      UserId:
        example: ce57e12a-fe27-43a2-9a1f-0792b3d36f2e
        type: string
      Username:
        example: wang374
        type: string
    type: object
  model.SendResetPasswordEmailRequest:
    properties:
      Email:
        example: wang374@uiuc.edu
        type: string
    type: object
  model.SendResetPasswordEmailResponseAPIError0:
    properties:
      error:
        example: email not registered
        type: string
    type: object
  model.SendResetPasswordEmailResponseSuccess:
    properties:
      message:
        example: reset email sent
        type: string
    type: object
  model.SigninRequest:
    properties:
      Email:
        example: wang374@uiuc.edu
        type: string
      Password:
        example: wang374password
        type: string
    type: object
  model.SigninResponseAPIError0:
    properties:
      error:
        example: email not registered
        type: string
    type: object
  model.SigninResponseAPIError1:
    properties:
      error:
        example: please verify your email
        type: string
    type: object
  model.SigninResponseAPIError2:
    properties:
      error:
        example: invalid password
        type: string
    type: object
  model.SigninResponseSuccess:
    properties:
      AuthToken:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1MzEzNTM2MzgsImlzcyI6ImpvZ2NoYXQuY29tIiwic3ViIjoid2FuZzM3NEB1aXVjLmVkdSJ9.RhRUpHJbIfid1hiJOTtStuxc86v0isnWny85COG9Mek
        type: string
      Email:
        example: wang374@uiuc.edu
        type: string
      UserId:
        example: ce57e12a-fe27-43a2-9a1f-0792b3d36f2e
        type: string
      Username:
        example: wang374
        type: string
    type: object
host: 178.128.0.108:3001
info:
  contact:
    email: admin@jogchat.com
    name: API Support
    url: admin@jogchat.com
  description: This is a ReferHelper API server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: ReferHelper API
  version: "1.0"
paths:
  /activate_and_signup:
    post:
      consumes:
      - application/json
      description: When user click on the GET link in user email, it will hit a frontend
        page as a GET request with {Email, Token} as parameters. The frontend page
        should then provide user with a form that ask for (Email(prefilled), Username,
        password, token(prefilled and hidden)). Once frontend gather all infos from
        the user, frontend should POST call this [ActivateAndSignup endpoint] with
        a post request that has {email, username, password, token} as JSON to sign
        the user up. This endpoint will both signup the user and activate their account.
      parameters:
      - description: ActivateAndSignupRequest is a POST JSON type
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.ActivateAndSignupRequest'
          type: object
      responses:
        "200":
          description: 'Success: verification email sent'
          schema:
            $ref: '#/definitions/model.ActivateAndSignupResponseSuccess'
            type: object
        "400":
          description: email already activated
          schema:
            $ref: '#/definitions/model.ActivateAndSignupResponseAPIError2'
            type: object
      summary: ActivateAndSignup
  /add_company:
    post:
      consumes:
      - application/json
      description: AddCompany is an endpoint that adds company json(id(generated),
        name, domain) to schemaless database
      parameters:
      - description: AddCompanyRequest is a POST JSON type
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.AddCompanyRequest'
          type: object
      responses:
        "200":
          description: 'Success: schemaless add company success'
          schema:
            $ref: '#/definitions/model.AddCompanyResponseSuccess'
            type: object
        "400":
          description: 'Failure: schemaless add company fail'
          schema:
            $ref: '#/definitions/model.AddCompanyResponseError0'
            type: object
      summary: AddCompany
  /add_school:
    post:
      consumes:
      - application/json
      description: AddSchool is an endpoint that adds school json(id(generated), name,
        domain) to schemaless database
      parameters:
      - description: AddSchoolRequest is a POST JSON type
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.AddSchoolRequest'
          type: object
      responses:
        "200":
          description: 'Success: schemaless add school success'
          schema:
            $ref: '#/definitions/model.AddSchoolResponseSuccess'
            type: object
        "400":
          description: 'Failure: schemaless add school fail'
          schema:
            $ref: '#/definitions/model.AddSchoolResponseError0'
            type: object
      summary: AddSchool
  /applicant_check_signup_email:
    post:
      consumes:
      - application/json
      description: Provide a school/university edu email to sign up for the applicant
        portal, if the email does not exists in schemaless database, we will send
        the email an activation link
      parameters:
      - description: ApplicantSignupEmailRequest is a POST JSON type
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.ApplicantSignupEmailRequest'
          type: object
      responses:
        "200":
          description: 'Success: verification email sent'
          schema:
            $ref: '#/definitions/model.ApplicantSignupResponseSuccess'
            type: object
        "400":
          description: email already registered
          schema:
            $ref: '#/definitions/model.ApplicantSignupResponseAPIError1'
            type: object
      summary: ApplicantCheckSignupEmail
  /get_all_companies:
    get:
      description: GetAllCompanies is an endpoint that returns companies list from
        schemaless database
      summary: Get All Companies
  /get_all_schools:
    get:
      description: GetAllSchools is an endpoint that returns schools list from schemaless
        database
      summary: Get All Schools
  /post_position:
    post:
      consumes:
      - application/json
      description: PostPosition is an endpoint called when an applicant create a referral
        position with dedicated JSON.
      parameters:
      - description: PostPositionRequest is a POST JSON type
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.PostPositionRequest'
          type: object
      responses:
        "200":
          description: 'Success: verification email sent'
          schema:
            $ref: '#/definitions/model.PostPositionResponseSuccess'
            type: object
        "400":
          description: construct cell failure
          schema:
            $ref: '#/definitions/model.PostPositionResponseAPIError1'
            type: object
      summary: PostPosition
  /referrer_check_signup_email:
    post:
      consumes:
      - application/json
      description: Onboarding user will provide a company email to sign up for the
        referral portal, if the email does not exists in schemaless database, we will
        send the email an activation link
      parameters:
      - description: ReferrerSignupEmailRequest is a POST JSON type
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.ReferrerSignupEmailRequest'
          type: object
      responses:
        "200":
          description: 'Success: verification email sent'
          schema:
            $ref: '#/definitions/model.ReferrerSignupResponseSuccess'
            type: object
        "400":
          description: email already registered
          schema:
            $ref: '#/definitions/model.ReferrerSignupResponseAPIError1'
            type: object
      summary: ReferrerCheckSignupEmail
  /reset_password_form:
    post:
      consumes:
      - application/json
      description: After user clicks on reset password link(GET with email and token)
        in email, front-end/mobile will provide user with a form, {Email(prefilled),
        Password, Token(prefilled)}. After user filled the form, front-end/mobile
        will call this endpoint with a JSON wrapped {Email(prefilled), Password, Token(prefilled)}
        POST to reset password. If the user is not activated at the point of click
        on reset_password, an email titled reset_password with activation instruction
        will be sent.
      parameters:
      - description: ResetPasswordFormRequest is a POST JSON type
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.ResetPasswordFormRequest'
          type: object
      responses:
        "200":
          description: 'Success: message: reset email sent'
          schema:
            $ref: '#/definitions/model.ResetPasswordFormResponseSuccess'
            type: object
        "400":
          description: 'Failure: email not registered'
          schema:
            $ref: '#/definitions/model.ResetPasswordFormResponseAPIError0'
            type: object
      summary: ResetPasswordForm
  /send_reset_password_email:
    post:
      consumes:
      - application/json
      description: When user click on reset password button with an email filled in
        a form above, front-end will call this endpoint with a JSON wrapped {Email,
        Token} to sent reset password email, a hacker cannot hack this end point by
        repeatedly calling and our system and spam send email. Requiring a session
        {Email, AuthToken} combination and this endpoint will only be able to sent
        email to this session's Email.
      parameters:
      - description: ResetPasswordButtonRequest is a POST JSON type
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.SendResetPasswordEmailRequest'
          type: object
      responses:
        "200":
          description: 'Success: message: reset email sent'
          schema:
            $ref: '#/definitions/model.SendResetPasswordEmailResponseSuccess'
            type: object
        "400":
          description: 'Failure: email not registered'
          schema:
            $ref: '#/definitions/model.SendResetPasswordEmailResponseAPIError0'
            type: object
      summary: SendResetPasswordEmail
  /signin:
    post:
      consumes:
      - application/json
      description: After user click on sign-in button, front-end will call this endpoint
        with a JSON wrapped {Email and Password}, the end point will then return an
        AuthToken on success. Front-end should store the authtoken for user either
        in session or cookie for user. To access password protect resource later,
        front-end needs to pass (username+AuthToken) to backend to verify user identity.
        This is called JWT Auth flow.
      parameters:
      - description: SigninRequest is a POST JSON type
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.SigninRequest'
          type: object
      responses:
        "200":
          description: 'Success: sign in request succeed'
          schema:
            $ref: '#/definitions/model.SigninResponseSuccess'
            type: object
        "400":
          description: invalid password
          schema:
            $ref: '#/definitions/model.SigninResponseAPIError2'
            type: object
      summary: Signin
swagger: "2.0"
